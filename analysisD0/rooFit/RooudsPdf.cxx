/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooudsPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooudsPdf); 

 RooudsPdf::RooudsPdf(const char *name, const char *title, 
                        RooAbsReal& _mbc,
                        RooAbsReal& _ebeam,
                        RooAbsReal& _alpha_mbc,
                        RooAbsReal& _alpha_de,
                        RooAbsReal& _de,
                        RooAbsReal& _dpcurv,
                        RooAbsReal& _dp) :
   RooAbsPdf(name,title), 
   mbc("mbc","mbc",this,_mbc),
   ebeam("ebeam","ebeam",this,_ebeam),
   alpha_mbc("alpha_mbc","alpha_mbc",this,_alpha_mbc),
   alpha_de("alpha_de","alpha_de",this,_alpha_de),
   de("de","de",this,_de),
   dpcurv("dpcurv","dpcurv",this,_dpcurv),
   dp("dp","dp",this,_dp)
 { 
 } 


 RooudsPdf::RooudsPdf(const RooudsPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   mbc("mbc",this,other.mbc),
   ebeam("ebeam",this,other.ebeam),
   alpha_mbc("alpha_mbc",this,other.alpha_mbc),
   alpha_de("alpha_de",this,other.alpha_de),
   de("de",this,other.de),
   dpcurv("dpcurv",this,other.dpcurv),
   dp("dp",this,other.dp)
 { 
 } 



 Double_t RooudsPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   //return exp(alpha_mbc*(mbc*mbc/ebeam/ebeam-1.)-alpha_de*de/1000.)*(1.+dpcurv*dp*dp/1000./1000.) ; 

   if (mbc > ebeam) return 0;
   double dp_max = sqrt(ebeam*ebeam - mbc*mbc);
   if (fabs(dp)<dp_max) {
     double arg = alpha_mbc*(mbc*mbc/ebeam/ebeam-1.)-alpha_de*de/1000.;
     //printf("pdf_bck, arg = %f\n", arg);
     //return exp(arg)*(1.+dpcurv*dp*dp/1000./1000.);
     return exp(arg)*(1.+dpcurv*dp*dp/100./100.);
   }
   return 0.;
 } 



